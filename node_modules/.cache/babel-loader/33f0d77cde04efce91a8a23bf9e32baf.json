{"ast":null,"code":"import _objectSpread from \"/home/arjavi/Desktop/Orbital/youtube-cat/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport \"firebase/firestore\";\nimport { config } from \"../../../config\"; // const config = {\n//   apiKey: \"AIzaSyDni4UflIR1JzzSmNdyUfOUIWx9x0nzGM8\",\n//   authDomain: \"cat-243915.firebaseapp.com\",\n//   databaseURL: \"https://cat-243915.firebaseio.com\",\n//   projectId: \"youtube-cat-243915\",\n//   storageBucket: \"youtube-cat-243915.appspot.com\",\n//   messagingSenderId: \"719371077954\",\n//   appId: \"1:719371077954:web:12eebc6a33e42ddc\"\n// };\n\nclass Firebase {\n  constructor() {\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).get().then(snapshot => {\n          const dbUser = snapshot.data(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = {};\n          } // merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignInWithGoogle = () => this.auth.signInWithPopup(this.googleProvider);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.user = uid => this.db.doc(\"users/\".concat(uid));\n\n    this.users = () => this.db.collection(\"users\");\n\n    app.initializeApp(config);\n    this.fieldValue = app.firestore.FieldValue;\n    this.auth = app.auth();\n    this.db = app.firestore();\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n  }\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/home/arjavi/Desktop/Orbital/youtube-cat/src/components/firebase/firebase.js"],"names":["app","config","Firebase","constructor","onAuthUserListener","next","fallback","auth","onAuthStateChanged","authUser","user","uid","get","then","snapshot","dbUser","data","roles","email","doCreateUserWithEmailAndPassword","password","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","db","doc","users","collection","initializeApp","fieldValue","firestore","FieldValue","GoogleAuthProvider"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,OAAO,oBAAP;AACA,SAASC,MAAT,QAAuB,iBAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AAAA,SAQdC,kBARc,GAQO,CAACC,IAAD,EAAOC,QAAP,KACnB,KAAKC,IAAL,CAAUC,kBAAV,CAA6BC,QAAQ,IAAI;AACvC,UAAIA,QAAJ,EAAc;AACZ,aAAKC,IAAL,CAAUD,QAAQ,CAACE,GAAnB,EACGC,GADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,gBAAMC,MAAM,GAAGD,QAAQ,CAACE,IAAT,EAAf,CADgB,CAGhB;;AACA,cAAI,CAACD,MAAM,CAACE,KAAZ,EAAmB;AACjBF,YAAAA,MAAM,CAACE,KAAP,GAAe,EAAf;AACD,WANe,CAQhB;;;AACAR,UAAAA,QAAQ;AACNE,YAAAA,GAAG,EAAEF,QAAQ,CAACE,GADR;AAENO,YAAAA,KAAK,EAAET,QAAQ,CAACS;AAFV,aAGHH,MAHG,CAAR;AAMAV,UAAAA,IAAI,CAACI,QAAD,CAAJ;AACD,SAlBH;AAmBD,OApBD,MAoBO;AACLH,QAAAA,QAAQ;AACT;AACF,KAxBD,CATY;;AAAA,SAoCda,gCApCc,GAoCqB,CAACD,KAAD,EAAQE,QAAR,KACjC,KAAKb,IAAL,CAAUc,8BAAV,CAAyCH,KAAzC,EAAgDE,QAAhD,CArCY;;AAAA,SAuCdE,4BAvCc,GAuCiB,CAACJ,KAAD,EAAQE,QAAR,KAC7B,KAAKb,IAAL,CAAUgB,0BAAV,CAAqCL,KAArC,EAA4CE,QAA5C,CAxCY;;AAAA,SA0CdI,kBA1Cc,GA0CO,MAAM,KAAKjB,IAAL,CAAUkB,eAAV,CAA0B,KAAKC,cAA/B,CA1Cb;;AAAA,SA4CdC,SA5Cc,GA4CF,MAAM,KAAKpB,IAAL,CAAUqB,OAAV,EA5CJ;;AAAA,SA8CdC,eA9Cc,GA8CIX,KAAK,IAAI,KAAKX,IAAL,CAAUuB,sBAAV,CAAiCZ,KAAjC,CA9Cb;;AAAA,SAgDda,gBAhDc,GAgDKX,QAAQ,IAAI,KAAKb,IAAL,CAAUyB,WAAV,CAAsBC,cAAtB,CAAqCb,QAArC,CAhDjB;;AAAA,SAkDdV,IAlDc,GAkDPC,GAAG,IAAI,KAAKuB,EAAL,CAAQC,GAAR,iBAAqBxB,GAArB,EAlDA;;AAAA,SAoDdyB,KApDc,GAoDN,MAAM,KAAKF,EAAL,CAAQG,UAAR,CAAmB,OAAnB,CApDA;;AACZrC,IAAAA,GAAG,CAACsC,aAAJ,CAAkBrC,MAAlB;AACA,SAAKsC,UAAL,GAAkBvC,GAAG,CAACwC,SAAJ,CAAcC,UAAhC;AACA,SAAKlC,IAAL,GAAYP,GAAG,CAACO,IAAJ,EAAZ;AACA,SAAK2B,EAAL,GAAUlC,GAAG,CAACwC,SAAJ,EAAV;AACA,SAAKd,cAAL,GAAsB,IAAI1B,GAAG,CAACO,IAAJ,CAASmC,kBAAb,EAAtB;AACD;;AAPY;;AAwDf,eAAexC,QAAf","sourcesContent":["import app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport \"firebase/firestore\";\nimport { config } from \"../../../config\";\n\n// const config = {\n//   apiKey: \"AIzaSyDni4UflIR1JzzSmNdyUfOUIWx9x0nzGM8\",\n//   authDomain: \"cat-243915.firebaseapp.com\",\n//   databaseURL: \"https://cat-243915.firebaseio.com\",\n//   projectId: \"youtube-cat-243915\",\n//   storageBucket: \"youtube-cat-243915.appspot.com\",\n//   messagingSenderId: \"719371077954\",\n//   appId: \"1:719371077954:web:12eebc6a33e42ddc\"\n// };\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n    this.fieldValue = app.firestore.FieldValue;\n    this.auth = app.auth();\n    this.db = app.firestore();\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n  }\n\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid)\n          .get()\n          .then(snapshot => {\n            const dbUser = snapshot.data();\n\n            // default empty roles\n            if (!dbUser.roles) {\n              dbUser.roles = {};\n            }\n\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              ...dbUser\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n  //   Authentication\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignInWithGoogle = () => this.auth.signInWithPopup(this.googleProvider);\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n  user = uid => this.db.doc(`users/${uid}`);\n\n  users = () => this.db.collection(\"users\");\n}\n\nexport default Firebase;\n"]},"metadata":{},"sourceType":"module"}